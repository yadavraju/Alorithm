package halting2;
import inmemorycompiler1.InMemoryJavaCompiler;
import java.util.Arrays;
import java.util.List;

import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;

import java.util.logging.Logger;

/** 
 * This class tests whether a given binary string is a code
 * for a (compilable) java program. 
 * 
 * A binary string is a code for a java program if, when it
 * is decoded as a string of (extended) ascii characters,
 * it can be successfully compiled (using javac).
 * 
 * If a run of test returns true, then the generated bytecode
 * is stored in this object and can be obtained by calling
 * getByteCode();
 *
 */
public class EncodingTester {
	private static final Logger LOG = Logger.getGlobal();
	//shouldn't have to do this -- workaround (doesn't work without it)
			static {//C:\Program Files\Java\jdk1.8.0_25
				System.setProperty("java.home", "C:\\Program Files\\Java\\jdk1.8.0_40\\jre");
			}
			//end temporary
	private Class<?> compiledClass;
	public Class<?> getCompiledClass() {
		return compiledClass;
	}
	
	public boolean test(String binStr) {
		String javaProgram = null;
		try {
			javaProgram = EncodeDecode.decode(binStr);
		} catch(IllegalArgumentException e) {
			LOG.severe("Decoding input string failed: " + e.getMessage());
			return false;
		}
		try {
			//JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
			String className = Util.readClassName(binStr);
			compiledClass = 
					InMemoryJavaCompiler.compile(className, javaProgram);
			
			
		} catch(Exception e) {
//			e.printStackTrace();
			LOG.warning("Compilation failed: " + e.getMessage());
			return false;
		}
	    return compiledClass !=null;
	}
	
	public static void main(String[] args) {
		EncodingTester t = new EncodingTester();
		String program = 
		"public class TestProg { \n" +
		"   public static void main(String[] args) {\n" +
		"       System.out.println(\"hello\");\n" +
        "   }\n" +
		"}";
		System.out.println("The program:\n" + program);
		System.out.println("Compiles? " + t.test(EncodeDecode.encode(program))); 
	}
}
